[build-system]
requires = [
    "setuptools>=69",
]
build-backend = "setuptools.build_meta"

[project]
readme = "README.md"
authors = [
    { name = "German Human Genome Phenome Archive (GHGA)", email = "contact@ghga.de" },
]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 1 - Planning",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Software Development :: Libraries",
    "Intended Audience :: Developers",
]
name = "hexkit"
version = "3.2.2"
description = "A Toolkit for Building Microservices using the Hexagonal Architecture"
dependencies = [
    "pydantic >=2, <3",
    "pydantic_settings >=2, <3",
    "PyYAML >=6.0, <7",
]

[project.license]
text = "Apache 2.0"

[project.optional-dependencies]
akafka = [
    "aiokafka~=0.10.0",
    "jsonschema >=4.22, <5",
]
s3 = [
    "boto3 >=1.34.104, <2",
    "botocore >=1.34.104, <2",
]
mongodb = [
    "motor >=3.4.0, <4",
]
test-akafka = [
    "hexkit[akafka]",
    "testcontainers[kafka] >=4.4.1, <5",
]
test-s3 = [
    "hexkit[s3]",
    "testcontainers >=4.4.1, <5",
]
test-mongodb = [
    "hexkit[mongodb]",
    "testcontainers[mongo] >=4.4.1, <5",
]
test = [
    "hexkit[test-akafka,test-s3,test-mongodb]",
]
all = [
    "hexkit[test]",
]

[project.urls]
Repository = "https://github.com/ghga-de/hexkit"

[tool.setuptools.packages.find]
where = [
    "src",
]

[tool.ruff]
exclude = [
    ".git",
    ".devcontainer",
    "__pycache__",
    "build",
    "dist",
]
line-length = 88
src = [
    "src",
    "tests",
    "examples",
    "scripts",
]
target-version = "py39"

[tool.ruff.lint]
fixable = [
    "UP",
    "I",
    "D",
]
ignore = [
    "E111",
    "E114",
    "E116",
    "PLW",
    "RUF001",
    "RUF010",
    "RUF012",
    "N818",
    "B008",
    "PLR2004",
    "D205",
    "D400",
    "D401",
    "D107",
    "D206",
    "D300",
    "UP040",
]
select = [
    "C90",
    "F",
    "I",
    "S",
    "B",
    "N",
    "UP",
    "PL",
    "RUF",
    "SIM",
    "D",
]

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"scripts/*" = [
    "PL",
    "S",
    "SIM",
    "D",
]
"tests/*" = [
    "S",
    "SIM",
    "PLR",
    "B011",
]
".devcontainer/*" = [
    "S",
    "SIM",
    "D",
]
"examples/*" = [
    "S",
    "D",
]
"__init__.py" = [
    "D",
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.mypy]
disable_error_code = "import"
show_error_codes = true
exclude = [
    "build/lib/",
]
warn_redundant_casts = true
warn_unused_ignores = true
check_untyped_defs = true
no_site_packages = false

[tool.pytest.ini_options]
minversion = "8.0"
asyncio_mode = "strict"

[tool.coverage.paths]
source = [
    "src",
    "/workspace/src",
    "**/lib/python*/site-packages",
]

[tool.tox]
legacy_tox_ini = """
    [tox]
    env_list = py3{9,12}

    [gh-actions]
    python =
        3.9: py39
        3.10: py310
        3.11: py311
        3.12: py312

    [testenv]
    pass_env =
        TC_HOST
        DOCKER_HOST
    deps =
        --no-deps -r ./lock/requirements-dev.txt
    commands = pytest {posargs}
"""
