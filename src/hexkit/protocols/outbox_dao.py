# Copyright 2021 - 2023 Universität Tübingen, DKFZ, EMBL, and Universität zu Köln
# for the German Human Genome-Phenome Archive (GHGA)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

"""Protocol for creating Data Access Objects to perform CRUD (plus find) interactions
with the database plus automatically publish the changes as events using a modification
of the outbox pattern.
"""

# ruff: noqa: PLR0913

from abc import abstractmethod
from collections.abc import AsyncGenerator, Collection
from dataclasses import dataclass
from typing import Callable, Optional, Union, overload

from hexkit.protocols.dao import (
    DaoFactoryBase,
    DaoNaturalId,
    DaoSurrogateId,
    Dto,
    DtoCreation,
    uuid4_id_generator,
)


@dataclass(frozen=True)
class Event:
    """An event published by an OutboxDAO when a resource is created, updated, or
    deleted.
    """

    type_: str
    key: str
    topic: str
    payload: dict


class OutboxDaoFactoryProtocol(DaoFactoryBase):
    """A protocol describing a factory to produce Data Access Objects (DAO) objects
    which automatically publish changes according to the outbox pattern.
    """

    @overload
    async def get_dao(
        self,
        *,
        name: str,
        dto_model: type[Dto],
        id_field: str,
        dto_to_event: Callable[[Dto], Event],
        fields_to_index: Optional[Collection[str]] = None,
        id_generator: Optional[AsyncGenerator[str, None]] = None,
    ) -> DaoNaturalId[Dto]:
        ...

    @overload
    async def get_dao(
        self,
        *,
        name: str,
        dto_model: type[Dto],
        id_field: str,
        dto_to_event: Callable[[Dto], Event],
        dto_creation_model: type[DtoCreation],
        fields_to_index: Optional[Collection[str]] = None,
        id_generator: Optional[AsyncGenerator[str, None]] = None,
    ) -> DaoSurrogateId[Dto, DtoCreation]:
        ...

    async def get_dao(
        self,
        *,
        name: str,
        dto_model: type[Dto],
        id_field: str,
        dto_to_event: Callable[[Dto], Event],
        dto_creation_model: Optional[type[DtoCreation]] = None,
        fields_to_index: Optional[Collection[str]] = None,
        id_generator: Optional[AsyncGenerator[str, None]] = None,
    ) -> Union[DaoSurrogateId[Dto, DtoCreation], DaoNaturalId[Dto]]:
        """Constructs a Outbox DAO for interacting with resources in a database.

        Args:
            name:
                The name of the resource type (roughly equivalent to the name of a
                database table or collection).
            dto_model:
                A DTO (Data Transfer Object) model describing the shape of resources.
            id_field:
                The name of the field of the `dto_model` that serves as resource ID.
                (DAO implementation might use this field as primary key.)
            fields_to_index:
                Optionally, provide any fields that should be indexed in addition to the
                `id_field`. Defaults to None.
            dto_to_event:
                A function that takes a DTO and returns an Event. This function is used
                to convert DTOs into events that are published by the DAO when resources
                are modified.
            dto_creation_model:
                An optional DTO model specific for creation of a new resource. This
                model has to be identical to the `dto_model` except that it has to miss
                the `id_field`. If specified, the resource ID will be generated by the DAO
                implementation upon resource creation. Otherwise (if set to None), resource IDs
                have to be specified upon resource creation. Defaults to None.
            id_generator:
                A generator that yields strings that will be used as IDs when creating
                new resources. Please note, each ID should be unique. Moreover, the
                generator should never exhaust.
                By default a UUID4-based generator is used.
        Returns:
            If a dedicated `dto_creation_model` is specified, a DAO of type
            DaoSurrogateID, which autogenerates IDs upon resource creation, is returned.
            Otherwise, returns a DAO of type DaoNaturalId, which require ID
            specification upon resource creation.

        Raises:
            self.CreationModelInvalidError:
                Raised when the DtoCreationModel was invalid in relation to the main
                DTO model.
            self.IdFieldNotFoundError:
                Raised when the dto_model did not contain the expected id_field.
        """
        self._validate(
            dto_model=dto_model,
            id_field=id_field,
            dto_creation_model=dto_creation_model,
            fields_to_index=fields_to_index,
        )

        if id_generator is None:
            # instantiate the default ID generator:
            id_generator = uuid4_id_generator()

        return await self._get_dao(
            name=name,
            dto_model=dto_model,
            id_field=id_field,
            fields_to_index=fields_to_index,
            dto_to_event=dto_to_event,
            dto_creation_model=dto_creation_model,
            id_generator=id_generator,
        )

    @overload
    @abstractmethod
    async def _get_dao(
        self,
        *,
        name: str,
        dto_model: type[Dto],
        id_field: str,
        dto_to_event: Callable[[Dto], Event],
        dto_creation_model: None,
        fields_to_index: Optional[Collection[str]],
        id_generator: AsyncGenerator[str, None],
    ) -> DaoNaturalId[Dto]:
        ...

    @overload
    @abstractmethod
    async def _get_dao(
        self,
        *,
        name: str,
        dto_model: type[Dto],
        id_field: str,
        dto_to_event: Callable[[Dto], Event],
        dto_creation_model: type[DtoCreation],
        fields_to_index: Optional[Collection[str]],
        id_generator: AsyncGenerator[str, None],
    ) -> DaoSurrogateId[Dto, DtoCreation]:
        ...

    @abstractmethod
    async def _get_dao(
        self,
        *,
        name: str,
        dto_model: type[Dto],
        id_field: str,
        dto_to_event: Callable[[Dto], Event],
        dto_creation_model: Optional[type[DtoCreation]],
        fields_to_index: Optional[Collection[str]],
        id_generator: AsyncGenerator[str, None],
    ) -> Union[DaoSurrogateId[Dto, DtoCreation], DaoNaturalId[Dto]]:
        """*To be implemented by the provider. Input validation is done outside of this
        method.*
        """
        ...
